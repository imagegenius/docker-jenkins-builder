#jinja2: keep_trailing_newline:True
{%- set has_latest= true if (development_versions == true and 'latest' in (development_versions_items | map(attribute="tag"))) or (development_versions == false) else false -%}
<!-- DO NOT EDIT THIS FILE MANUALLY  -->

{% if project_deprecation_status %}
# DEPRECATION NOTICE

This image is deprecated. We will not offer support for this image and it will not be updated.
{% if project_deprecation_message is defined %}{{ project_deprecation_message }}{% endif %}

{% endif %}
# [{{ ig_project_name_short }}/{{ project_name }}]({{ project_github_repo_url }})

[![GitHub Release]({{ ig_shieldsio_github_release }}{{ "&include_prereleases" if has_latest == false }})]({{ project_github_repo_url }}/releases)
[![GitHub Package Repository]({{ ig_shieldsio_badge_github_package }})]({{ project_github_repo_url }}/packages)
[![Jenkins Build]({{ ig_shieldsio_jenkins_build }})]({{ ig_ci_url }}/job/Docker-Pipeline-Builders/job/{{ project_repo_name }}/job/{{ ig_branch }}/)
{% for var in repo_vars %}
{% if 'CI' in var and 'TRUE' in var.upper() and '_' not in var %}
[![IG CI]({{ ig_shieldsio_dynamic_ci }})]({{ ig_object_url }}/{{ project_name }}/latest-{{ ig_branch }}/index.html)
{% endif %}
{% endfor %}

[{{ project_blurb.split()[0] }}]({{ project_url }}) - {{ project_blurb.split()[1:] | join(' ') | trim }}
{% if project_blurb_optional_extras_enabled %}
{% for item in project_blurb_optional_extras %}
* {{ item }}
{% endfor %}
{% endif %}

[![{{ project_name }}]({{ project_logo }})]({{ project_url }})

## Supported Architectures

We use Docker manifest for cross-platform compatibility. More details can be found on [Docker's website](https://github.com/docker/distribution/blob/master/docs/spec/manifest-v2-2.md#manifest-list).

To obtain the appropriate image for your architecture, simply pull `ghcr.io/{{ ig_project_name_short }}/{{ project_name }}:{{ release_tag }}`. Alternatively, you can also obtain specific architecture images by using tags.

This image supports the following architectures:

| Architecture | Available | Tag |
| :----: | :----: | ---- |
| x86-64 | {{ '✅ | amd64-\<version tag\>' if 'x86-64' in (available_architectures | map(attribute="arch") ) else '❌ |' }} |
| arm64 | {{ '✅ | arm64v8-\<version tag\>' if 'arm64' in (available_architectures | map(attribute="arch") ) else '❌ |' }} |
| armhf | {{ '✅ | arm32v7-\<version tag\>' if 'armhf' in (available_architectures | map(attribute="arch") ) else '❌ |' }} |

{% if development_versions %}
## Version Tags

This image offers different versions via tags. Be cautious when using unstable or development tags, and read their descriptions carefully.

| Tag | Available | Description |
| :----: | :----: |--- |
| latest | {{ '✅ | ' + development_versions_items[(development_versions_items | map(attribute="tag")) == "latest"].desc if has_latest == true else '❌ |' }} |
{% for item in development_versions_items %}
{% if item.tag != 'latest' %}
| {{ item.tag }} | ✅ | {{ item.desc }} |
{% endif %}
{% endfor %}
{% endif %}
{% if app_setup_block_enabled %}
## Application Setup
{% if app_setup_block is defined and app_setup_block %}

{{ app_setup_block | trim }}
{% endif %}
{% if ["CI_SSL='true'", "CI_SSL= 'true'" ,"CI_SSL = 'true'"]|select("in", repo_vars) %}

{% include "README_SNIPPETS/STRICT_PROXY.j2" %}
{% endif %}
{% if readme_seccomp is defined and readme_seccomp %}

{% include "README_SNIPPETS/SECCOMP.j2" %}
{% endif %}
{% if readme_keyboard is defined and readme_keyboard %}

{% include "README_SNIPPETS/KEYBOARD.j2" %}
{% endif %}
{% if readme_hwaccel is defined and readme_hwaccel %}

{% include "README_SNIPPETS/HWACCEL.j2" %}
{% endif %}
{% if readme_media is defined and readme_media %}

{% include "README_SNIPPETS/MEDIA.j2" %}
{% endif %}

{% endif %}
## Usage

Example snippets to start creating a container:

### Docker Compose

```yaml
{% if not custom_compose is defined %}---
version: "2.1"
services:
  {{ project_name }}:
    image: ghcr.io/{{ ig_project_name_short }}/{{ project_name }}:{{ release_tag }}
    container_name: {{ project_name }}
{% if param_usage_include_hostname is sameas true %}
    hostname: {{ param_hostname }}
{% elif param_usage_include_hostname == 'optional' %}
    hostname: {{ param_hostname }} #optional
{% endif %}
{% if param_usage_include_mac_address is sameas true %}
    mac_address: {{ param_mac_address }}
{% elif param_usage_include_mac_address == 'optional' %}
    mac_address: {{ param_mac_address }} #optional
{% endif %}
{% if privileged is sameas true %}
    privileged: true
{% elif privileged == 'optional' %}
    privileged: true #optional
{% endif %}
{% if cap_add_param or opt_cap_add_param %}
    cap_add:
{% endif %}
{% if cap_add_param %}
{% for item in cap_add_param_vars %}
      - {{ item.cap_add_var }}
{% endfor %}
{% endif %}
{% if opt_cap_add_param %}
{% for item in opt_cap_add_param_vars %}
      - {{ item.cap_add_var }} #optional
{% endfor %}
{% endif %}
{% if security_opt_param or opt_security_opt_param %}
    security_opt:
{% endif %}
{% if security_opt_param %}
{% for item in security_opt_param_vars %}
      - {{ item.compose_var }}
{% endfor %}
{% endif %}
{% if opt_security_opt_param %}
{% for item in opt_security_opt_param_vars %}
      - {{ item.compose_var }} #optional
{% endfor %}
{% endif %}
{% if param_usage_include_net is sameas true %}
    network_mode: {{ param_net }}
{% elif param_usage_include_net == 'optional' %}
    network_mode: {{ param_net }} #optional
{% endif %}
{% if common_param_env_vars_enabled or param_usage_include_env or opt_param_usage_include_env %}
    environment:
{% endif %}
{% if common_param_env_vars_enabled is sameas true %}
{% for item in common_param_env_vars %}
{% if ' ' in item.env_value %}
      - "{{ item.env_var }}={{ item.env_value }}"
{% else %}
      - {{ item.env_var }}={{ item.env_value }}
{% endif %}
{% endfor %}
{% elif common_param_env_vars_enabled == 'optional' %}
{% for item in common_param_env_vars %}
{% if ' ' in item.env_value %}
      - "{{ item.env_var }}={{ item.env_value }}" #optional
{% else %}
      - {{ item.env_var }}={{ item.env_value }} #optional
{% endif %}
{% endfor %}
{% endif %}
{% if param_usage_include_env %}
{% for item in param_env_vars if not item.env_var | lower is eq "tz" %}
{% if ' ' in item.env_value %}
      - "{{ item.env_var }}={{ item.env_value }}"
{% else %}
      - {{ item.env_var }}={{ item.env_value }}
{% endif %}
{% endfor %}
{% endif %}
{% if opt_param_usage_include_env %}
{% for item in opt_param_env_vars %}
{% if ' ' in item.env_value %}
      - "{{ item.env_var }}={{ item.env_value }}" #optional
{% else %}
      - {{ item.env_var }}={{ item.env_value }} #optional
{% endif %}
{% endfor %}
{% endif %}
{% if param_usage_include_vols or opt_param_usage_include_vols %}
    volumes:
{% endif %}
{% if param_usage_include_vols %}
{% for item in param_volumes %}
      - {{ item.vol_host_path }}:{{ item.vol_path }}
{% endfor %}
{% endif %}
{% if opt_param_usage_include_vols %}
{% for item in opt_param_volumes %}
      - {{ item.vol_host_path }}:{{ item.vol_path }} #optional
{% endfor %}
{% endif %}
{% if param_usage_include_ports or opt_param_usage_include_ports %}
    ports:
{% endif %}
{% if param_usage_include_ports %}
{% for item in param_ports %}
      - {{ item.external_port }}:{{ item.internal_port }}
{% endfor %}
{% endif %}
{% if opt_param_usage_include_ports %}
{% for item in opt_param_ports %}
      - {{ item.external_port }}:{{ item.internal_port }} #optional
{% endfor %}
{% endif %}
{% if param_device_map or opt_param_device_map %}
    devices:
{% endif %}
{% if param_device_map %}
{% for item in param_devices %}
      - {{ item.device_host_path }}:{{ item.device_path }}
{% endfor %}
{% endif %}
{% if opt_param_device_map %}
{% for item in opt_param_devices %}
      - {{ item.device_host_path }}:{{ item.device_path }} #optional
{% endfor %}
{% endif %}
{% if custom_params is defined %}
{% for item in custom_params %}
{% if item.array is not defined %}
    {{ item.name_compose }}: "{{ item.value }}"
{% else %}
    {{ item.name_compose }}:
{% for item2 in item.value %}
      - {{ item2 }}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% if opt_custom_params is defined %}
{% for item in opt_custom_params %}
{% if item.array is not defined %}
    {{ item.name_compose }}: "{{ item.value }}" #optional
{% else %}
    {{ item.name_compose }}: #optional
{% for item2 in item.value %}
      - {{ item2 }} #optional
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
    restart: unless-stopped{% else %}{{ custom_compose }}{% endif %}
{% if external_application_snippet_enabled %}

# This container requires an external application to be run separately to be run separately.
{{ external_application_compose_block }}
{% endif %}

```

### Docker CLI ([Click here for more info](https://docs.docker.com/engine/reference/commandline/cli/))

```bash
docker run -d \
  --name={{ param_container_name }} \
{% if param_usage_include_hostname is sameas true %}
  --hostname={{ param_hostname }} \
{% elif param_usage_include_hostname == 'optional' %}
  --hostname={{ param_hostname }} `#optional` \
{% endif %}
{% if param_usage_include_mac_address is sameas true %}
  --mac-address={{ param_mac_address }} \
{% elif param_usage_include_mac_address == 'optional' %}
  --mac-address={{ param_mac_address }} `#optional` \
{% endif %}
{% if param_usage_include_net is sameas true %}
  --net={{ param_net }} \
{% elif param_usage_include_net == 'optional' %}
  --net={{ param_net }} `#optional` \
{% endif %}
{% if privileged is sameas true %}
  --privileged \
{% elif privileged == 'optional' %}
  --privileged `#optional` \
{% endif %}
{% if cap_add_param %}
{% for item in cap_add_param_vars %}
  --cap-add={{ item.cap_add_var }} \
{% endfor %}
{% endif %}
{% if opt_cap_add_param %}
{% for item in opt_cap_add_param_vars %}
  --cap-add={{ item.cap_add_var }} `#optional` \
{% endfor %}
{% endif %}
{% if security_opt_param %}
{% for item in security_opt_param_vars %}
  --security-opt={{ item.run_var }} \
{% endfor %}
{% endif %}
{% if opt_security_opt_param %}
{% for item in opt_security_opt_param_vars %}
  --security-opt {{ item.run_var }} `#optional` \
{% endfor %}
{% endif %}
{% if common_param_env_vars_enabled is sameas true %}
{% for item in common_param_env_vars %}
{% if ' ' in item.env_value %}
  -e {{ item.env_var }}="{{ item.env_value }}" \
{% else %}
  -e {{ item.env_var }}={{ item.env_value }} \
{% endif %}
{% endfor %}
{% elif common_param_env_vars_enabled == 'optional' %}
{% for item in common_param_env_vars %}
{% if ' ' in item.env_value %}
  -e {{ item.env_var }}="{{ item.env_value }}" `#optional` \
{% else %}
  -e {{ item.env_var }}={{ item.env_value }} `#optional` \
{% endif %}
{% endfor %}
{% endif %}
{% if param_usage_include_env %}
{% for item in param_env_vars if not item.env_var | lower is eq "tz" %}
{% if ' ' in item.env_value %}
  -e {{ item.env_var }}="{{ item.env_value }}" \
{% else %}
  -e {{ item.env_var }}={{ item.env_value }} \
{% endif %}
{% endfor %}
{% endif %}
{% if opt_param_usage_include_env %}
{% for item in opt_param_env_vars %}
{% if ' ' in item.env_value %}
  -e {{ item.env_var }}="{{ item.env_value }}" `#optional` \
{% else %}
  -e {{ item.env_var }}={{ item.env_value }} `#optional` \
{% endif %}
{% endfor %}
{% endif %}
{% if param_usage_include_ports %}
{% for item in param_ports %}
  -p {{ item.external_port }}:{{ item.internal_port }} \
{% endfor %}
{% endif %}
{% if opt_param_usage_include_ports %}
{% for item in opt_param_ports %}
  -p {{ item.external_port }}:{{ item.internal_port }} `#optional` \
{% endfor %}
{% endif %}
{% if param_usage_include_vols %}
{% for item in param_volumes %}
  -v {{ item.vol_host_path }}:{{ item.vol_path }} \
{% endfor %}
{% endif %}
{% if opt_param_usage_include_vols %}
{% for item in opt_param_volumes %}
  -v {{ item.vol_host_path }}:{{ item.vol_path }} `#optional` \
{% endfor %}
{% endif %}
{% if param_device_map %}
{% for item in param_devices %}
  --device {{ item.device_host_path }}:{{ item.device_path }} \
{% endfor %}
{% endif %}
{% if opt_param_device_map %}
{% for item in opt_param_devices %}
  --device {{ item.device_host_path }}:{{ item.device_path }} `#optional` \
{% endfor %}
{% endif %}
{% if custom_params is defined %}
{% for item in custom_params %}
{% if item.array is not defined %}
  --{{ item.name }}="{{ item.value }}" \
{% else %}
{% for item2 in item.value %}
  --{{ item.name }}="{{ item2 }}" \
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% if opt_custom_params is defined %}
{% for item in opt_custom_params %}
{% if item.array is not defined %}
  --{{ item.name }}="{{ item.value }}" `#optional` \
{% else %}
{% for item2 in item.value %}
  --{{ item.name }}="{{ item2 }}" `#optional` \
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
  --restart unless-stopped \
  ghcr.io/{{ ig_project_name_short }}/{{ project_name }}:{{ release_tag }}
{% if external_application_snippet_enabled %}

# This container requires an external application to be run separately.
{{ external_application_cli_block }}
{% endif %}

```

{% if optional_block_1 %}
{% for item in optional_block_1_items %}
{{ item }}
{% endfor %}
{% endif %}
## Variables

To configure the container, pass variables at runtime using the format `<external>:<internal>`. For instance, `-p 8080:80` exposes port `80` inside the container, making it accessible outside the container via the host's IP on port `8080`.

| Variable | Description |
| :----: | --- |
{% if param_usage_include_hostname %}
| `--hostname=` | {{ param_hostname_desc }} |
{% endif %}
{% if param_usage_include_mac_address %}
| `--mac-address=` | {{ param_mac_address_desc }} |
{% endif %}
{% if param_usage_include_net %}
| `--net={{ param_net }}` | {{ param_net_desc }} |
{% endif %}
{% if param_usage_include_ports %}
{% for item in param_ports %}
| `-p {{ item.internal_port }}` | {{ item.port_desc }} |
{% endfor %}
{% endif %}
{% if opt_param_usage_include_ports %}
{% for item in opt_param_ports %}
| `-p {{ item.internal_port }}` | {{ item.port_desc }} |
{% endfor %}
{% endif %}
{% if common_param_env_vars_enabled %}
{% for item in common_param_env_vars %}
| `-e {{ item.env_var }}={{ item.env_value }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if param_usage_include_env %}
{% for item in param_env_vars if not item.env_var | lower is eq "tz" %}
| `-e {{ item.env_var }}={{ item.env_value }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_param_usage_include_env %}
{% for item in opt_param_env_vars %}
| `-e {{ item.env_var }}={{ item.env_value }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if param_usage_include_vols %}
{% for item in param_volumes %}
| `-v {{ item.vol_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_param_usage_include_vols %}
{% for item in opt_param_volumes %}
| `-v {{ item.vol_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if param_device_map %}
{% for item in param_devices %}
| `--device {{ item.device_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_param_device_map %}
{% for item in opt_param_devices %}
| `--device {{ item.device_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if custom_params is defined %}
{% for item in custom_params %}
| `--{{ item.name }}=` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_custom_params is defined %}
{% for item in opt_custom_params %}
| `--{{ item.name }}=` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if security_opt_param %}
{% for item in security_opt_param_vars %}
| `--security-opt {{ item.run_security_opt_var }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_security_opt_param %}
{% for item in opt_security_opt_param_vars %}
| `--security-opt {{ item.run_var }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if cap_add_param or opt_cap_add_param or (custom_params is defined and 'sysctl' in (custom_params | map(attribute="name")) ) %}
{% endif %}

## Umask for running applications

All of our images allow overriding the default umask setting for services started within the containers using the optional -e UMASK=022 option. Note that umask works differently than chmod and subtracts permissions based on its value, not adding. For more information, please refer to the Wikipedia article on umask [here](https://en.wikipedia.org/wiki/Umask).
{% if optional_parameters is defined %}

## Optional Variables

{{ optional_parameters | trim }}
{% endif %}
{% if common_param_env_vars_enabled %}

## User / Group Identifiers

To avoid permissions issues when using volumes (`-v` flags) between the host OS and the container, you can specify the user (`PUID`) and group (`PGID`). Make sure that the volume directories on the host are owned by the same user you specify, and the issues will disappear.

Example: `PUID=1000` and `PGID=1000`. To find your PUID and PGID, run `id user`.

```bash
  $ id username
    uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)
```
{% if common_param_env_vars_enabled == 'optional' %}

You only need to set the PUID and PGID variables if you are mounting the /config folder
{% endif %}
{% endif %}

## Updating the Container

Most of our images are static, versioned, and require an image update and container recreation to update the app. We do not recommend or support updating apps inside the container. Check the [Application Setup](#application-setup) section for recommendations for the specific image.

Instructions for updating containers:

### Via Docker Compose

* Update all images: `docker-compose pull`
  * or update a single image: `docker-compose pull {{ project_name }}`
* Let compose update all containers as necessary: `docker-compose up -d`
  * or update a single container: `docker-compose up -d {{ project_name }}`
* You can also remove the old dangling images: `docker image prune`

### Via Docker Run

* Update the image: `docker pull ghcr.io/{{ ig_project_name_short }}/{{ project_name }}:{{ release_tag }}`
* Stop the running container: `docker stop {{ project_name }}`
* Delete the container: `docker rm {{ project_name }}`
* Recreate a new container with the same docker run parameters as instructed above (if mapped correctly to a host folder, your `/config` folder and settings will be preserved)
* You can also remove the old dangling images: `docker image prune`

## Versions

{% for item in changelogs %}
* **{{ item.date }}** - {{ item.desc }}
{% endfor %}
